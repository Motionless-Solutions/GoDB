// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: users.sql

package sqlc

import (
	"context"
	"time"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  username,
  email,
  passwordhash,
  fullname,
  createDate,
  role
) VALUES (
  $1, $2, $3, $4, $5, $6
) RETURNING id, email, username, passwordhash, fullname, createdate, role
`

type CreateUserParams struct {
	Username     string    `json:"username"`
	Email        string    `json:"email"`
	Passwordhash string    `json:"passwordhash"`
	Fullname     string    `json:"fullname"`
	Createdate   time.Time `json:"createdate"`
	Role         int32     `json:"role"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Username,
		arg.Email,
		arg.Passwordhash,
		arg.Fullname,
		arg.Createdate,
		arg.Role,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Username,
		&i.Passwordhash,
		&i.Fullname,
		&i.Createdate,
		&i.Role,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, email, username, passwordhash, fullname, createdate, role FROM users
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Username,
		&i.Passwordhash,
		&i.Fullname,
		&i.Createdate,
		&i.Role,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, email, username, passwordhash, fullname, createdate, role FROM users
ORDER BY username
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.Username,
			&i.Passwordhash,
			&i.Fullname,
			&i.Createdate,
			&i.Role,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET email = $2,
    username = $3,
    passwordhash = $4,
    fullname = $5,
    createDate = $6,
    role = $7
WHERE id = $1
RETURNING id, email, username, passwordhash, fullname, createdate, role
`

type UpdateUserParams struct {
	ID           int64     `json:"id"`
	Email        string    `json:"email"`
	Username     string    `json:"username"`
	Passwordhash string    `json:"passwordhash"`
	Fullname     string    `json:"fullname"`
	Createdate   time.Time `json:"createdate"`
	Role         int32     `json:"role"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUser,
		arg.ID,
		arg.Email,
		arg.Username,
		arg.Passwordhash,
		arg.Fullname,
		arg.Createdate,
		arg.Role,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Username,
		&i.Passwordhash,
		&i.Fullname,
		&i.Createdate,
		&i.Role,
	)
	return i, err
}
